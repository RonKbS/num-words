const { test, only } = require('tap')

const numWords = require('.')

only('test playground', (t) => {
  t.end()
})

test('Should convert numbers to words correctly', (t) => {
  const assertNum = (num, words) => {
    t.equal(numWords(num), words)
  }

  assertNum(1, 'one')
  assertNum(12, 'twelve')
  assertNum(123, 'one hundred and twenty three')
  assertNum(1234, 'one thousand two hundred and thirty four')
  assertNum(12345, 'twelve thousand three hundred and forty five')
  assertNum(123456, 'one hundred twenty three thousand four hundred and fifty six')
  assertNum(1234567, 'twelve hundred thirty four thousand five hundred and sixty seven')
  assertNum(12345678, 'one million twenty three hundred forty five thousand six hundred and seventy eight')
  assertNum(123456789, 'twelve million thirty four hundred fifty six thousand seven hundred and eighty nine')

  assertNum(2, 'two')
  assertNum(23, 'twenty three')
  assertNum(234, 'two hundred and thirty four')
  assertNum(2345, 'two thousand three hundred and forty five')
  assertNum(23456, 'twenty three thousand four hundred and fifty six')
  assertNum(234567, 'two hundred thirty four thousand five hundred and sixty seven')
  assertNum(2345678, 'twenty three hundred forty five thousand six hundred and seventy eight')
  assertNum(23456789, 'two million thirty four hundred fifty six thousand seven hundred and eighty nine')
  assertNum(234567890, 'twenty three million forty five hundred sixty seven thousand eight hundred and ninety')

  assertNum(3, 'three')
  assertNum(34, 'thirty four')
  assertNum(345, 'three hundred and forty five')
  assertNum(3456, 'three thousand four hundred and fifty six')
  assertNum(34567, 'thirty four thousand five hundred and sixty seven')
  assertNum(345678, 'three hundred forty five thousand six hundred and seventy eight')
  assertNum(3456789, 'thirty four hundred fifty six thousand seven hundred and eighty nine')
  assertNum(34567890, 'three million forty five hundred sixty seven thousand eight hundred and ninety')
  assertNum(345678901, 'thirty four million fifty six hundred seventy eight thousand nine hundred and one')

  assertNum(4, 'four')
  assertNum(45, 'forty five')
  assertNum(456, 'four hundred and fifty six')
  assertNum(4567, 'four thousand five hundred and sixty seven')
  assertNum(45678, 'forty five thousand six hundred and seventy eight')
  assertNum(456789, 'four hundred fifty six thousand seven hundred and eighty nine')
  assertNum(4567890, 'forty five hundred sixty seven thousand eight hundred and ninety')
  assertNum(45678901, 'four million fifty six hundred seventy eight thousand nine hundred and one')
  assertNum(456789012, 'forty five million sixty seven hundred eighty nine thousand and twelve')

  assertNum(5, 'five')
  assertNum(56, 'fifty six')
  assertNum(567, 'five hundred and sixty seven')
  assertNum(5678, 'five thousand six hundred and seventy eight')
  assertNum(56789, 'fifty six thousand seven hundred and eighty nine')
  assertNum(567890, 'five hundred sixty seven thousand eight hundred and ninety')
  assertNum(5678901, 'fifty six hundred seventy eight thousand nine hundred and one')
  assertNum(56789012, 'five million sixty seven hundred eighty nine thousand and twelve')
  assertNum(567890123, 'fifty six million seventy eight hundred ninety thousand one hundred and twenty three')

  assertNum(6, 'six')
  assertNum(67, 'sixty seven')
  assertNum(678, 'six hundred and seventy eight')
  assertNum(6789, 'six thousand seven hundred and eighty nine')
  assertNum(67890, 'sixty seven thousand eight hundred and ninety')
  assertNum(678901, 'six hundred seventy eight thousand nine hundred and one')
  assertNum(6789012, 'sixty seven hundred eighty nine thousand and twelve')
  assertNum(67890123, 'six million seventy eight hundred ninety thousand one hundred and twenty three')
  assertNum(678901234, 'sixty seven million eighty nine hundred one thousand two hundred and thirty four')

  assertNum(7, 'seven')
  assertNum(78, 'seventy eight')
  assertNum(789, 'seven hundred and eighty nine')
  assertNum(7890, 'seven thousand eight hundred and ninety')
  assertNum(78901, 'seventy eight thousand nine hundred and one')
  assertNum(789012, 'seven hundred eighty nine thousand and twelve')
  assertNum(7890123, 'seventy eight hundred ninety thousand one hundred and twenty three')
  assertNum(78901234, 'seven million eighty nine hundred one thousand two hundred and thirty four')
  assertNum(789012345, 'seventy eight million ninety hundred twelve thousand three hundred and forty five')

  assertNum(8, 'eight')
  assertNum(89, 'eighty nine')
  assertNum(890, 'eight hundred and ninety')
  assertNum(8901, 'eight thousand nine hundred and one')
  assertNum(89012, 'eighty nine thousand and twelve')
  assertNum(890123, 'eight hundred ninety thousand one hundred and twenty three')
  assertNum(8901234, 'eighty nine hundred one thousand two hundred and thirty four')
  assertNum(89012345, 'eight million ninety hundred twelve thousand three hundred and forty five')
  assertNum(890123456, 'eighty nine million one hundred twenty three thousand four hundred and fifty six')

  assertNum(9, 'nine')
  assertNum(90, 'ninety')
  assertNum(901, 'nine hundred and one')
  assertNum(9012, 'nine thousand and twelve')
  assertNum(90123, 'ninety thousand one hundred and twenty three')
  assertNum(901234, 'nine hundred one thousand two hundred and thirty four')
  assertNum(9012345, 'ninety hundred twelve thousand three hundred and forty five')
  assertNum(90123456, 'nine million one hundred twenty three thousand four hundred and fifty six')
  assertNum(901234567, 'ninety million twelve hundred thirty four thousand five hundred and sixty seven')

  assertNum(0, 'zero')
  assertNum('0', 'zero')
  assertNum('012', 'twelve')
  assertNum('0123', 'one hundred and twenty three')
  assertNum('01234', 'one thousand two hundred and thirty four')
  assertNum('012345', 'twelve thousand three hundred and forty five')
  assertNum('0123456', 'one hundred twenty three thousand four hundred and fifty six')
  assertNum('012345678', 'one million twenty three hundred forty five thousand six hundred and seventy eight')

  assertNum('bad', '')
  assertNum('12x', '')
  assertNum(1e3, 'one thousand')

  t.throws(() => numWords(1e9))

  t.end()
})
